
which.func3=function(x,y){which(x==y)}

collect_best_coefficients_outputnet=function(sim.results,bound,formula,alpha.fixed=T){

#net1=sim.results[[1]]$last.network #grabbing last network
#form2=as.formula(paste("net1~",paste(formula)[[3]]))

if (alpha.fixed==T){

#taking out alpha param
sim.results[[9]]=sim.results[[9]][,1:(ncol(sim.results[[9]])-1)]

#getting best coefficients-includes final solutoin, best found and anything within 30 of best found chi square

temp.dat=sim.results[[8]]
#ids=rep(1:4,each=table(temp.dat[,2])[1])
ids=rep(1:4,times=c(table(temp.dat[,2])))
paramatrix=as.matrix(rbind(sim.results$best.params,sim.results$final.solution.params))

id.keep=which(tapply(sim.results[[8]][,1],ids,min)[c(1,3)]<(sim.results$best.chisquare+bound))

if (length(id.keep)>0){
#temp.params=matrix(rbind(paramatrix,paramatrix[2,],paramatrix[2,])[id.keep,],nrow=length(id.keep))
temp.params=matrix(sim.results[[9]][as.numeric(names(id.keep)),],nrow=length(id.keep))

#temp.params[,2]=unique(temp.dat[,2])[as.numeric(names(id.keep))]
paramatrix=rbind(paramatrix,temp.params)
}


#length.output=length(unique(names(sim.results[[1]])))
#temp.mat=sim.results[[1]][c(seq(1,(max.iter*3-1),by=length.output))][which(sim.results[[1]][c(seq(2,(max.iter*3),by=length.output))]<(sim.results$best.chisquare+bound))]

length.output=length(unique(names(sim.results[[1]])))
length.output2=length(sim.results[[1]])
temp.mat=sim.results[[1]][c(seq(1,length.output2,by=length.output))][which(sim.results[[1]][c(seq(2,length.output2,by=length.output))]<(sim.results$best.chisquare+bound))]

temp.mat=do.call(rbind,temp.mat)
paramatrix=unique(rbind(paramatrix,temp.mat))

out=list(paramatrix=paramatrix)
 }#alpha.fixed=T



if (alpha.fixed==F){

#taking out alpha param
optim.extra.alphas=sim.results[[9]][,(ncol(sim.results[[9]]))]
sim.results[[9]]=sim.results[[9]][,1:(ncol(sim.results[[9]])-1)]


#getting best coefficients-includes final solutoin, best found and anything within 30 of best found chi square

temp.dat=sim.results[[8]]
#ids=rep(1:4,each=table(temp.dat[,2])[1])
#ids=rep(1:4,times=c(table(temp.dat[,2])))

#ids.temp=as.numeric(table(paste(temp.dat[,2],temp.dat[,3])))
#ids=rep(1:length(ids.temp),times=ids.temp)

temp.nums=paste(temp.dat[,2],temp.dat[,3])
temp.nums.unique=unique(temp.nums)

ids=unlist(lapply(temp.nums, which.func3,temp.nums.unique))

paramatrix=as.matrix(rbind(sim.results$best.params,sim.results$final.solution.params))
alphas.keep=c(sim.results$best.alpha,sim.results$final.solution.alpha)

#id.keep=which(tapply(sim.results[[1]][[8]][,1],ids,min)[-length(ids.temp)]<(sim.results[[1]]$best.chisquare+bound))
#id.keep=which(tapply(sim.results[[1]][[8]][,1],ids,min)<(sim.results[[1]]$best.chisquare+bound))


if (nrow(sim.results[[9]])<length(temp.nums.unique)){
id.keep=which(tapply(sim.results[[8]][,1],ids,min)[-length(temp.nums.unique)]<(sim.results$best.chisquare+bound))
}


if (nrow(sim.results[[9]])==length(temp.nums.unique)){
id.keep=which(tapply(sim.results[[8]][,1],ids,min)<(sim.results$best.chisquare+bound))
}

if (length(id.keep)>0){
#temp.params=matrix(rbind(paramatrix,paramatrix[2,],paramatrix[2,])[id.keep,],nrow=length(id.keep))
temp.params=matrix(sim.results[[9]][as.numeric(names(id.keep)),],nrow=length(id.keep))
temp.alphas=optim.extra.alphas[as.numeric(names(id.keep))]

#temp.params[,2]=unique(temp.dat[,2])[as.numeric(names(id.keep))]
paramatrix=rbind(paramatrix,temp.params)
alphas.keep=c(alphas.keep,temp.alphas)

keep.paramatrix=unique(cbind(paramatrix[,],alphas.keep))
alphas.keep=keep.paramatrix[,(ncol(keep.paramatrix))]
paramatrix=keep.paramatrix[,-(ncol(keep.paramatrix))]
}



length.output=length(unique(names(sim.results[[1]])))
length.output2=length(sim.results[[1]])
temp.mat=sim.results[[1]][c(seq(1,length.output2,by=length.output))][which(sim.results[[1]][c(seq(2,length.output2,by=length.output))]<(sim.results$best.chisquare+bound))]

temp.mat=do.call(rbind,temp.mat)
paramatrix=rbind(paramatrix,temp.mat)
rownames(paramatrix)=1:nrow(paramatrix)
paramatrix=unique(paramatrix)

temp.alphas=sim.results[[1]][c(seq(4,length.output2,by=length.output))][which(sim.results[[1]][c(seq(2,length.output2,by=length.output))]<(sim.results$best.chisquare+bound))]
alphas.keep=(unlist(c(alphas.keep,temp.alphas)))

alphas.keep=alphas.keep[as.numeric(rownames(paramatrix))]

out=list(paramatrix=paramatrix,alphas.keep=alphas.keep)
 }#alpha.fixed=F

out
}
