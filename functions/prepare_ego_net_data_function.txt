#function to take input data 
# and get ego network distribution, random network with right degree distribution
#and characs of egos on network

#data=ego network dataset, of form charac, charac1, charac2, etc.; also have ties alter info, weights and possibly other info
#degree=vector representing the degree distribution in the network to be simulated
#size.net=size of network to be simulated
#var.name.degree=name of variable in data that has the degree of the respondents
#var.name.characs= vector of names of characterisictics for homophily model-case control logistic

#alter.tie.data=a dataset indicating if alter 1 is tied to 2, 1 to 3...
#max.alter=max number of alters the respondents were allowed to name
#resp.weights=vector of weights to create representative population 
#var.name.characs.alter=list of variable names for alter characteristics, same order as var.name.charac
#formula.initial.ergm=formula to run an initial ergm on the ego networks 

is.wholenumber <- function(x, tol = .Machine$double.eps^0.5)  abs(x - round(x)) < tol



edgelist.alter.func=function(deg,alter.tie.vector,possible.ties,max.alter)
{ 
if (deg<max.alter){
dat=cbind(rep(1,deg),2:(deg+1))
possible.ties=possible.ties[as.numeric(alter.tie.vector)*c(1:nrow(possible.ties)),]
   }

if (deg>=max.alter){
dat=cbind(rep(1,max.alter),2:(max.alter+1))
possible.ties=possible.ties[as.numeric(alter.tie.vector)*c(1:nrow(possible.ties)),]
   }

return(rbind(dat,possible.ties))
}


prepare_ego_nets_for_sim=function(data, degree=NULL,
size.net, var.name.degree, var.name.characs ,alter.tie.data, max.alter=NULL
,resp.weights=NULL,var.name.characs.alter, formula.initial.ergm=NULL){

if (is.null(max.alter)){max.alter=max(unlist(lapply(var.name.characs.alter,length)))}



#if don't give input degree dist, then 
if (is.null(degree)){degree.vector=data[,var.name.degree]

#getting table of degree distribution
degree.dist=table(degree.vector)

#generating random network with correct degree distribution
degree.dist.netsize=round(degree.dist*size.net/sum(degree.dist))

diff.size=sum(degree.dist.netsize)-size.net
addsubtract=rpois(abs(diff.size),mean(degree.vector))

degree.vector=rep(as.numeric(names(degree.dist.netsize)),degree.dist.netsize)

if (diff.size<0){

degree.vector=c(degree.vector,addsubtract)}

if (diff.size>0){

#here making sure that degree selected is in network 
subtract=(degree.vector%in% addsubtract)

#if selected case not in network, just randomly sample 
if(sum(subtract)==0){
degree.vector=degree.vector[-sample(1:length(degree.vector),abs(diff.size))]
  }


if(sum(subtract)!=0){
degree.vector=degree.vector[-sample(which(subtract),abs(diff.size))]
  }

 }
}

if (!is.null(degree)){degree.vector=degree}


degree.vector2=degree.vector[degree.vector>0]

if ( !( is.wholenumber(sum(degree.vector2)/2)) ){smp=sample(1:length(degree.vector2),1);degree.vector2[smp]=degree.vector2[smp]+1}


net1=degree.sequence.game(degree.vector2,method="vl")

edgelist=get.edgelist(net1)

rm1=(which(edgelist[,1]==edgelist[,2]))
if (length(rm1)>0){edgelist=edgelist[-rm1,]}
edgelist=unique(edgelist)

net2=graph.edgelist(edgelist,directed=F)
odeg.temp=degree(net2)

detach(package:igraph)
####################################


#getting random network of desired size with characteristics 
suppressMessages(library(ergm));
suppressMessages(library(network));
suppressMessages(library(sna))

empty.net<-network.initialize(size.net, directed=FALSE)
initial.randnet<-network.edgelist(edgelist, empty.net, ignore.eval=FALSE, directed=FALSE)

#getting degree of person in random network

odegree=rep(NA,initial.randnet[[2]][[1]])
odegree[2:length(odegree)]=summary(initial.randnet~sociality,base=0)
odegree[1]=odeg.temp[1]

#linking people in network to dataset
# so that people with certain degree have right characteristics

empirical.degree=data[,var.name.degree]

smp.ids=NA

if (is.null(resp.weights)){
resp.weights.temp=rep(1,nrow(data))
}

if (!is.null(resp.weights)){
resp.weights.temp=resp.weights
}


for (i in 1:length(odegree)){

diff.degree=abs(empirical.degree-odegree[i])
samps.temp=which(diff.degree<1)

samps.temp=samps.temp[!(samps.temp%in%smp.ids)]


#if not within 1, take sample of closest people
if (length(samps.temp)==0){

samp.from=which(diff.degree<2)


if (length(samp.from)>0){
smp.ids[i]=sample(c(samp.from,0),1,prob=c(resp.weights.temp[samp.from],0))

if (length(samp.from)==1){
smp.ids[i]=samp.from
    }
  }

if (length(samp.from)==0){
#if not within 2, sample from closest people

samp.from=which(diff.degree==min(diff.degree))
smp.ids[i]=sample(c(samp.from,0),1,prob=c(resp.weights.temp[samp.from],0))

if (length(samp.from)==1){
smp.ids[i]=samp.from
    }
  }


      }

if (length(samps.temp)!=0){
smp.ids[i]=sample(paste(samps.temp[]),1,prob=resp.weights.temp[samps.temp])

  }
 }
rm(diff.degree)

smp.ids=as.numeric(smp.ids)



#getting characteristics of people onto network
for (p in 1:length(var.name.characs)){
var=data[smp.ids,var.name.characs[p]]
#dealing with missing data-putting in values of not missing people around that person 
miss=which(is.na(var))
  if (length(miss)>0){
for (m in 1:length(miss)){
markers=miss[m]   
temp.deg=data[smp.ids[markers],var.name.degree]


var[miss][m]=sample(na.omit(var[which((abs(data[smp.ids,var.name.degree]-temp.deg))<2)]),1)

       }
   }
initial.randnet %v% var.name.characs[p]<-var}

initial.randnet %v% "deg"<-odegree


#####################################

#getting network of stacked ego networks with 
#characteristics on network
#so can run ergm on it

non.isolates=which(empirical.degree!=0)
edge.list.net=list()
edge.list=list()

m.flag=0
edgelist.sample=matrix()

possible.ties=combinations(max.alter,2)+1
#making 0's NAs in data

alter.tie.data.miss=alter.tie.data
alter.tie.data.miss[is.na(alter.tie.data.miss)]=0

for (x in non.isolates){

edge.list[[x]]=
edgelist.alter.func(empirical.degree[x],alter.tie.vector=alter.tie.data.miss[x,],possible.ties=possible.ties,max.alter=max.alter)



edge.list.net[[x]]=m.flag+edge.list[[x]]
m.flag=max(edge.list.net[[x]])

if (x==non.isolates[[1]]){
edgelist.sample=edge.list.net[[x]]
  }
else {
edgelist.sample=rbind(edgelist.sample,edge.list.net[[x]])
  }
}




gt<-network.initialize(max(edgelist.sample), directed=FALSE)
ego.net<-network.edgelist(edgelist.sample, gt, ignore.eval=FALSE, directed=FALSE)


#getting characteristics of respondents and alters onto network

empirical.degree.max=empirical.degree
empirical.degree.max[empirical.degree.max>max.alter]=max.alter
miss.list=list()

for (p in 1:length(var.name.characs)){

var.list=list()

names.vars=c(var.name.characs[p],var.name.characs.alter[[p]])

for (x in non.isolates){
var.list[[x]]=data[x,names.vars][,1:(empirical.degree.max[x]+1)]

}


var.list=unlist(var.list)
ego.net %v% var.name.characs[p]<-var.list
#dealing with missing data

miss.list[[p]]=which(is.na(var.list))
}


miss=sort(unique(unlist(miss.list)))

#taking out people with missing data
ego.net=delete.vertices(ego.net,miss)

#getting formula and running initial ergm on stacked ego networks

if (!is.null(formula.initial.ergm)){
form=as.formula(paste("ego.net","~",formula.initial.ergm))
gc();gc()
ergm.egonet=ergm(form,burnin=100000,MCMCsamplesize=20000,interval=200,MPLEonly=T)
gc();gc()
}
if (is.null(formula.initial.ergm)){ergm.egonet=NULL}




##############################################################

#getting empirical ego network distribution 


suppressMessages(library(igraph ,quietly=T, warn.conflicts=F))
 ego.list=lapply(lapply(lapply(edge.list,"-",0),"t"),graph,n=1,directed=F)

ego.list=lapply(ego.list,get.adjacency, sparse=F)

temp.mark=length(edge.list)-length(empirical.degree)


detach(package:igraph)
suppressMessages(library(sna));
suppressMessages(library(network))
egodist=unlist(lapply(ego.list,egofunc))

if (temp.mark<0){
egodist[(length(ego.list)+1):(length(ego.list)+abs(temp.mark) ) ]=1
}


#if missing data on edges b/t alters, put a NA for ego type

global.id=1:nrow(alter.tie.data)

total.possible.ties=data[,var.name.degree]*(data[,var.name.degree]-1)/2
total.possible.ties[data[,var.name.degree]>max.alter]=max.alter*(max.alter-1)/2

miss.alter.ties=global.id[colSums(!apply(alter.tie.data,1,is.na),na.rm=T)!=total.possible.ties]

egodist[miss.alter.ties]=NA

data$ego_net_type=egodist


if (!is.null(resp.weights)){
egodist=table(sample(egodist,length(egodist),prob=resp.weights,replace=T))
}

if (is.null(resp.weights)){
egodist=table(unlist(egodist))
}
realdist=rep(0,53)

distids=as.numeric(names(egodist))[1:length(egodist)]
realdist[distids]=egodist[1:length(egodist)]


#collecting data into a list and outputing it

list(egodist=realdist,ergm.egonet=ergm.egonet,egonet=ego.net,initial.randnet=initial.randnet,initial.edgelist=edgelist
,egonet.data=data[smp.ids,],smp.ids=smp.ids)

}

